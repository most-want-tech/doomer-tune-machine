name: Cleanup Audio Releases

on:
  schedule:
    # Run daily at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual trigger for testing

permissions:
  contents: write  # Required to delete releases and tags

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Delete old audio releases
        uses: actions/github-script@v7
        with:
          script: |
            const ONE_DAY_MS = 24 * 60 * 60 * 1000;
            const now = Date.now();
            let deletedCount = 0;
            
            console.log('Fetching releases...');
            
            // Get all releases
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            console.log(`Found ${releases.length} total releases`);
            
            // Filter for audio releases (tag starts with 'audio-')
            const audioReleases = releases.filter(release => 
              release.tag_name.startsWith('audio-')
            );
            
            console.log(`Found ${audioReleases.length} audio releases`);
            
            for (const release of audioReleases) {
              const createdAt = new Date(release.created_at).getTime();
              const age = now - createdAt;
              
              if (age > ONE_DAY_MS) {
                console.log(`Deleting release: ${release.tag_name} (${release.name})`);
                console.log(`  Created: ${release.created_at}`);
                console.log(`  Age: ${Math.round(age / (60 * 60 * 1000))} hours`);
                
                try {
                  // Delete the release
                  await github.rest.repos.deleteRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.id
                  });
                  
                  // Delete the tag
                  try {
                    await github.rest.git.deleteRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `tags/${release.tag_name}`
                    });
                  } catch (tagError) {
                    console.log(`  Warning: Could not delete tag ${release.tag_name}: ${tagError.message}`);
                  }
                  
                  deletedCount++;
                  console.log(`  ✓ Deleted successfully`);
                } catch (error) {
                  console.log(`  ✗ Failed to delete: ${error.message}`);
                }
              } else {
                console.log(`Keeping release: ${release.tag_name} (age: ${Math.round(age / (60 * 60 * 1000))} hours)`);
              }
            }
            
            console.log(`\nCleanup complete. Deleted ${deletedCount} release(s).`);
